#pragma once

#include "nbInstructionSet.h"
#include "types.h"

struct nbInstructionDecodeInfo
{
    UniqueOpCode opcode;
    uint16_t instruction;
    uint16_t mask;
    const char* string;
};

static const nbInstructionDecodeInfo instructionInfo[] =
{
    {UniqueOpCode::IMM,     NB_IMM_INSTRUCTION,     NB_IMM_INSTRUCTION_MASK,   "imm"},
    {UniqueOpCode::ADD_IMM, NB_ADD_IMM_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "add"},
    {UniqueOpCode::ADD_REG, NB_ADD_REG_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "add"},
    {UniqueOpCode::ADC_IMM, NB_ADC_IMM_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "adc"},
    {UniqueOpCode::ADC_REG, NB_ADC_REG_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "adc"},
    {UniqueOpCode::SUB_IMM, NB_SUB_IMM_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "sub"},
    {UniqueOpCode::SUB_REG, NB_SUB_REG_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "sub"},
    {UniqueOpCode::SBB_IMM, NB_SBB_IMM_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "sbb"},
    {UniqueOpCode::SBB_REG, NB_SBB_REG_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "sbb"},
    {UniqueOpCode::AND_IMM, NB_AND_IMM_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "and"},
    {UniqueOpCode::AND_REG, NB_AND_REG_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "and"},
    {UniqueOpCode::OR_IMM,  NB_OR_IMM_INSTRUCTION,  NB_ARITH_INSTRUCTION_MASK, "or"},
    {UniqueOpCode::OR_REG,  NB_OR_REG_INSTRUCTION,  NB_ARITH_INSTRUCTION_MASK, "or"},
    {UniqueOpCode::XOR_IMM, NB_XOR_IMM_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "xor"},
    {UniqueOpCode::XOR_REG, NB_XOR_REG_INSTRUCTION, NB_ARITH_INSTRUCTION_MASK, "xor"},
    {UniqueOpCode::SLA,     NB_SLA_INSTRUCTION,     NB_SHIFT_INSTRUCTION_MASK, "sla"},
    {UniqueOpCode::SLX,     NB_SLX_INSTRUCTION,     NB_SHIFT_INSTRUCTION_MASK, "slx"},
    {UniqueOpCode::SL0,     NB_SL0_INSTRUCTION,     NB_SHIFT_INSTRUCTION_MASK, "sl0"},
    {UniqueOpCode::SL1,     NB_SL1_INSTRUCTION,     NB_SHIFT_INSTRUCTION_MASK, "sl1"},
    {UniqueOpCode::RL,      NB_RL_INSTRUCTION,      NB_SHIFT_INSTRUCTION_MASK, "rl"},
    {UniqueOpCode::SRA,     NB_SRA_INSTRUCTION,     NB_SHIFT_INSTRUCTION_MASK, "sra"},
    {UniqueOpCode::SRX,     NB_SRX_INSTRUCTION,     NB_SHIFT_INSTRUCTION_MASK, "srx"},
    {UniqueOpCode::SR0,     NB_SR0_INSTRUCTION,     NB_SHIFT_INSTRUCTION_MASK, "sr0"},
    {UniqueOpCode::SR1,     NB_SR1_INSTRUCTION,     NB_SHIFT_INSTRUCTION_MASK, "sr1"},
    {UniqueOpCode::RR,      NB_RR_INSTRUCTION,      NB_SHIFT_INSTRUCTION_MASK, "rr"},
    {UniqueOpCode::CMP_IMM,     NB_CMP_IMM_INSTRUCTION,    NB_ARITH_INSTRUCTION_MASK, "cmp"},
    {UniqueOpCode::CMP_REG,     NB_CMP_REG_INSTRUCTION,    NB_ARITH_INSTRUCTION_MASK, "cmp"},
    {UniqueOpCode::TEST_IMM,    NB_TEST_IMM_INSTRUCTION,   NB_ARITH_INSTRUCTION_MASK, "test"},
    {UniqueOpCode::TEST_REG,    NB_TEST_REG_INSTRUCTION,   NB_ARITH_INSTRUCTION_MASK, "test"},
    {UniqueOpCode::LOAD_IMM,    NB_LOAD_IMM_INSTRUCTION,   NB_ARITH_INSTRUCTION_MASK, "load"},
    {UniqueOpCode::LOAD_REG,    NB_LOAD_REG_INSTRUCTION,   NB_ARITH_INSTRUCTION_MASK, "load"},
    {UniqueOpCode::MUL_IMM,     NB_MUL_IMM_INSTRUCTION,    NB_ARITH_INSTRUCTION_MASK, "mul"},
    {UniqueOpCode::MUL_REG,     NB_MUL_REG_INSTRUCTION,    NB_ARITH_INSTRUCTION_MASK, "mul"},
    {UniqueOpCode::MULS_IMM,    NB_MULS_IMM_INSTRUCTION,   NB_ARITH_INSTRUCTION_MASK, "muls"},
    {UniqueOpCode::MULS_REG,    NB_MULS_REG_INSTRUCTION,   NB_ARITH_INSTRUCTION_MASK, "muls"},
    {UniqueOpCode::DIV_IMM,     NB_DIV_IMM_INSTRUCTION,    NB_ARITH_INSTRUCTION_MASK, "div"},
    {UniqueOpCode::DIV_REG,     NB_DIV_REG_INSTRUCTION,    NB_ARITH_INSTRUCTION_MASK, "div"},
    {UniqueOpCode::DIVS_IMM,    NB_DIVS_IMM_INSTRUCTION,   NB_ARITH_INSTRUCTION_MASK, "divs"},
    {UniqueOpCode::DIVS_REG,    NB_DIVS_REG_INSTRUCTION,   NB_ARITH_INSTRUCTION_MASK, "divs"},
    {UniqueOpCode::BSL,         NB_BSL_INSTRUCTION,        NB_BS_INSTRUCTION_MASK, "bsl"},
    {UniqueOpCode::BSR,         NB_BSR_INSTRUCTION,        NB_BS_INSTRUCTION_MASK, "bsr"},
    {UniqueOpCode::FMUL,        NB_FMUL_INSTRUCTION,       NB_FPU_INSTRUCTION_MASK, "fmul"},
    {UniqueOpCode::FDIV,        NB_FDIV_INSTRUCTION,       NB_FPU_INSTRUCTION_MASK, "fdiv"},
    {UniqueOpCode::FADD,        NB_FADD_INSTRUCTION,       NB_FPU_INSTRUCTION_MASK, "fadd"},
    {UniqueOpCode::FSUB,        NB_FSUB_INSTRUCTION,       NB_FPU_INSTRUCTION_MASK, "fsub"},
    {UniqueOpCode::FCMP,        NB_FCMP_INSTRUCTION,       NB_FPU_INSTRUCTION_MASK, "fcmp"},
    {UniqueOpCode::FINT,        NB_FINT_INSTRUCTION,       NB_FPU_INSTRUCTION_MASK, "fint"},
    {UniqueOpCode::FFLT,        NB_FFLT_INSTRUCTION,       NB_FPU_INSTRUCTION_MASK, "fflt"},
    {UniqueOpCode::NOP,         NB_NOP_INSTRUCTION,        NB_NOP_INSTRUCTION_MASK, "nop"},
    {UniqueOpCode::SLEEP,       NB_SLEEP_INSTRUCTION,      NB_SLEEP_INSTRUCTION_MASK, "sleep"},
    {UniqueOpCode::JUMP,        NB_JUMP_INSTRUCTION,       NB_JUMP_INSTRUCTION_MASK, "jump"},
    {UniqueOpCode::JUMPZ,       NB_JUMPZ_INSTRUCTION,      NB_JUMP_INSTRUCTION_MASK, "jumpz"},
    {UniqueOpCode::JUMPC,       NB_JUMPC_INSTRUCTION,      NB_JUMP_INSTRUCTION_MASK, "jumpc"},
    {UniqueOpCode::JUMPNZ,      NB_JUMPNZ_INSTRUCTION,     NB_JUMP_INSTRUCTION_MASK, "jumpnz"},
    {UniqueOpCode::JUMPNC,      NB_JUMPNC_INSTRUCTION,     NB_JUMP_INSTRUCTION_MASK, "jumpnc"},
    {UniqueOpCode::CALL,        NB_CALL_INSTRUCTION,       NB_JUMP_INSTRUCTION_MASK, "call"},
    {UniqueOpCode::CALLZ,       NB_CALLZ_INSTRUCTION,      NB_JUMP_INSTRUCTION_MASK, "callz"},
    {UniqueOpCode::CALLC,       NB_CALLC_INSTRUCTION,      NB_JUMP_INSTRUCTION_MASK, "callc"},
    {UniqueOpCode::CALLNZ,      NB_CALLNZ_INSTRUCTION,     NB_JUMP_INSTRUCTION_MASK, "callnz"},
    {UniqueOpCode::CALLNC,      NB_CALLNC_INSTRUCTION,     NB_JUMP_INSTRUCTION_MASK, "callnc"},
    {UniqueOpCode::JUMP_REL,    NB_JUMP_REL_INSTRUCTION,   NB_JUMP_INSTRUCTION_MASK, "jump"},
    {UniqueOpCode::JUMPZ_REL,   NB_JUMPZ_REL_INSTRUCTION,  NB_JUMP_INSTRUCTION_MASK, "jumpz"},
    {UniqueOpCode::JUMPC_REL,   NB_JUMPC_REL_INSTRUCTION,  NB_JUMP_INSTRUCTION_MASK, "jumpc"},
    {UniqueOpCode::JUMPNZ_REL,  NB_JUMPNZ_REL_INSTRUCTION, NB_JUMP_INSTRUCTION_MASK, "jumpnz"},
    {UniqueOpCode::JUMPNC_REL,  NB_JUMPNC_REL_INSTRUCTION, NB_JUMP_INSTRUCTION_MASK, "jumpnc"},
    {UniqueOpCode::CALL_REL,    NB_CALL_REL_INSTRUCTION,   NB_JUMP_INSTRUCTION_MASK, "call"},
    {UniqueOpCode::CALLZ_REL,   NB_CALLZ_REL_INSTRUCTION,  NB_JUMP_INSTRUCTION_MASK, "callz"},
    {UniqueOpCode::CALLC_REL,   NB_CALLC_REL_INSTRUCTION,  NB_JUMP_INSTRUCTION_MASK, "callc"},
    {UniqueOpCode::CALLNZ_REL,  NB_CALLNZ_REL_INSTRUCTION, NB_JUMP_INSTRUCTION_MASK, "callnz"},
    {UniqueOpCode::CALLNC_REL,  NB_CALLNC_REL_INSTRUCTION, NB_JUMP_INSTRUCTION_MASK, "callnc"},
    {UniqueOpCode::SVC,         NB_SVC_INSTRUCTION,        NB_SVC_INSTRUCTION_MASK, "svc"},
    {UniqueOpCode::RET,         NB_RET_INSTRUCTION,        NB_RET_INSTRUCTION_MASK, "ret"},
    {UniqueOpCode::RETI,        NB_RETI_INSTRUCTION,       NB_RET_INSTRUCTION_MASK, "reti"},
    {UniqueOpCode::RETE,        NB_RETE_INSTRUCTION,       NB_RET_INSTRUCTION_MASK, "rete"},
    {UniqueOpCode::LDW_REG,     NB_LDW_REG_INSTRUCTION,    NB_LOAD_STORE_INSTRUCTION_MASK, "ldw"},
    {UniqueOpCode::LDW_IMM,     NB_LDW_IMM_INSTRUCTION,    NB_LOAD_STORE_INSTRUCTION_MASK, "ldw"},
    {UniqueOpCode::STW_REG,     NB_STW_REG_INSTRUCTION,    NB_LOAD_STORE_INSTRUCTION_MASK, "stw"},
    {UniqueOpCode::STW_IMM,     NB_STW_IMM_INSTRUCTION,    NB_LOAD_STORE_INSTRUCTION_MASK, "stw"},
    {UniqueOpCode::LDSPR,       NB_LDSPR_INSTRUCTION,      NB_LOAD_STORE_SPR_INSTRUCTION_MASK, "ldspr"},
    {UniqueOpCode::STSPR,       NB_STSPR_INSTRUCTION,      NB_LOAD_STORE_SPR_INSTRUCTION_MASK, "stspr"},
    {UniqueOpCode::OUT,         NB_OUT_INSTRUCTION,        NB_IO_INSTRUCTION_MASK, "out"},
    {UniqueOpCode::IN,          NB_IN_INSTRUCTION,         NB_IO_INSTRUCTION_MASK, "in"},
    {UniqueOpCode::INCW,        NB_INCW_INSTRUCTION,       NB_INCW_INSTRUCTION_MASK, "incw"},
    {UniqueOpCode::DECW,        NB_DECW_INSTRUCTION,       NB_DECW_INSTRUCTION_MASK, "decw"}
};

